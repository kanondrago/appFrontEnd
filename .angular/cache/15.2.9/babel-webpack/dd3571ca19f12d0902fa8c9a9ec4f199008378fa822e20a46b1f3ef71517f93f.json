{"ast":null,"code":"import { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { LoginService } from '../services/login.service';\nexport const LoginResolver = (route, state, loginService = inject(LoginService)) => loginService.getUserLogged().pipe(catchError(err => {\n  return of('No data' + err);\n}));\nexport const LoggedResolver = (route, state, loginService = inject(LoginService), routeService = inject(Router)) => loginService.getUserLogged().pipe(tap(data => {\n  if (data) {\n    return data;\n  } else {\n    routeService.navigate(['/']);\n  }\n}), catchError(err => {\n  return of('No data' + err);\n}));","map":{"version":3,"mappings":"AAAA,SAGEA,MAAM,QAED,iBAAiB;AACxB,SAASC,MAAM,QAAQ,eAAe;AACtC,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAAcC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AACrD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAO,MAAMC,aAAa,GAAmB,CAC3CC,KAA6B,EAC7BC,KAA0B,EAC1BC,eAA6BR,MAAM,CAACI,YAAY,CAAC,KAEjDI,YAAY,CAACC,aAAa,EAAE,CAACC,IAAI,CAC/BR,UAAU,CAAES,GAAG,IAAI;EACjB,OAAOV,EAAE,CAAC,SAAS,GAAGU,GAAG,CAAC;AAC5B,CAAC,CAAC,CACH;AAEH,OAAO,MAAMC,cAAc,GAAmB,CAC5CN,KAA6B,EAC7BC,KAA0B,EAC1BC,eAA6BR,MAAM,CAACI,YAAY,CAAC,EACjDS,eAAuBb,MAAM,CAACD,MAAM,CAAC,KAErCS,YAAY,CAACC,aAAa,EAAE,CAACC,IAAI,CAC/BP,GAAG,CAAEW,IAAI,IAAI;EACX,IAAIA,IAAI,EAAE;IACR,OAAOA,IAAI;GACZ,MAAM;IACLD,YAAY,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;AAEhC,CAAC,CAAC,EACFb,UAAU,CAAES,GAAG,IAAI;EACjB,OAAOV,EAAE,CAAC,SAAS,GAAGU,GAAG,CAAC;AAC5B,CAAC,CAAC,CACH","names":["Router","inject","of","catchError","tap","LoginService","LoginResolver","route","state","loginService","getUserLogged","pipe","err","LoggedResolver","routeService","data","navigate"],"sourceRoot":"","sources":["D:\\MMC\\dev\\TechnicalTests\\mmc-5418-technical-test-fullstack-app\\app\\src\\app\\login\\resolvers\\login.resolver.ts"],"sourcesContent":["import {\r\n  ActivatedRouteSnapshot,\r\n  ResolveFn,\r\n  Router,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { inject } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nimport { LoginService } from '../services/login.service';\r\nexport const LoginResolver: ResolveFn<any> = (\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot,\r\n  loginService: LoginService = inject(LoginService)\r\n): Observable<{}> =>\r\n  loginService.getUserLogged().pipe(\r\n    catchError((err) => {\r\n      return of('No data' + err);\r\n    })\r\n  );\r\n\r\nexport const LoggedResolver: ResolveFn<any> = (\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot,\r\n  loginService: LoginService = inject(LoginService),\r\n  routeService: Router = inject(Router)\r\n): Observable<{}> =>\r\n  loginService.getUserLogged().pipe(\r\n    tap((data) => {\r\n      if (data) {\r\n        return data;\r\n      } else {\r\n        routeService.navigate(['/']);\r\n      }\r\n    }),\r\n    catchError((err) => {\r\n      return of('No data' + err);\r\n    })\r\n  );\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}