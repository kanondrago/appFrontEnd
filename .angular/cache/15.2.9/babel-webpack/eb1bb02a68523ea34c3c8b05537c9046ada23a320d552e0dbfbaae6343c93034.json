{"ast":null,"code":"import { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AdminService } from '../services/admin.service';\nexport const GetListResolver = (activatedRoute, state, adminService = inject(AdminService), router = inject(Router)) => adminService.getList(['transactions']).pipe(catchError(err => {\n  router.navigate(['/login']);\n  return of(err);\n}));","map":{"version":3,"mappings":"AAAA,SAIEA,MAAM,QAED,iBAAiB;AACxB,SAASC,MAAM,QAAQ,eAAe;AACtC,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAa,gBAAgB;AAChD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAO,MAAMC,eAAe,GAAmB,CAC7CC,cAAsC,EACtCC,KAA0B,EAC1BC,eAA6BP,MAAM,CAACG,YAAY,CAAC,EACjDK,SAAiBR,MAAM,CAACD,MAAM,CAAC,KAE/BQ,YAAY,CAACE,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,CAACC,IAAI,CACzCR,UAAU,CAAES,GAAG,IAAI;EACjBH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAC3B,OAAOX,EAAE,CAACU,GAAG,CAAC;AAChB,CAAC,CAAC,CACH","names":["Router","inject","of","catchError","AdminService","GetListResolver","activatedRoute","state","adminService","router","getList","pipe","err","navigate"],"sourceRoot":"","sources":["D:\\MMC\\dev\\TechnicalTests\\mmc-5418-technical-test-frontend\\app\\src\\app\\admin\\resolvers\\admin.resolver.ts"],"sourcesContent":["import {\r\n  ActivatedRoute,\r\n  ActivatedRouteSnapshot,\r\n  ResolveFn,\r\n  Router,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { inject } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { AdminService } from '../services/admin.service';\r\nexport const GetListResolver: ResolveFn<any> = (\r\n  activatedRoute: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot,\r\n  adminService: AdminService = inject(AdminService),\r\n  router: Router = inject(Router)\r\n): Observable<{}> =>\r\n  adminService.getList(['transactions']).pipe(\r\n    catchError((err) => {\r\n      router.navigate(['/login']);\r\n      return of(err);\r\n    })\r\n  );\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}