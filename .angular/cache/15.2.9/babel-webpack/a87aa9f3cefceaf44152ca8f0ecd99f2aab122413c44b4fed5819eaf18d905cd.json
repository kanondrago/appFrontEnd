{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport class BearertokenInterceptor {\n  constructor(location, locationStrategy) {\n    this.location = location;\n    this.locationStrategy = locationStrategy;\n  }\n  intercept(req, next) {\n    if (localStorage.getItem('authuser') !== null) {\n      const authuser = JSON.parse(localStorage.getItem('authuser'));\n      console.log(this.locationStrategy.getBaseHref());\n      if (authuser.auth.token !== null) {\n        const authToken = `Bearer ${authuser.auth.token}`;\n        let url = environment.api.url;\n        req = req.clone({\n          headers: req.headers.set('Authorization', authToken),\n          withCredentials: false\n        });\n      }\n    }\n    console.log(req);\n    return next.handle(req);\n  }\n}\nBearertokenInterceptor.ɵfac = function BearertokenInterceptor_Factory(t) {\n  return new (t || BearertokenInterceptor)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i1.LocationStrategy));\n};\nBearertokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BearertokenInterceptor,\n  factory: BearertokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAMA,SAASA,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,sBAAsB;EACjCC,YACUC,QAAkB,EAClBC,gBAAkC;IADlC,aAAQ,GAARD,QAAQ;IACR,qBAAgB,GAAhBC,gBAAgB;EACvB;EACHC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;MAC7C,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;MAC7DI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,gBAAgB,CAACW,WAAW,EAAE,CAAC;MAChD,IAAIL,QAAQ,CAACM,IAAI,CAACC,KAAK,KAAK,IAAI,EAAE;QAChC,MAAMC,SAAS,GAAG,UAAUR,QAAQ,CAACM,IAAI,CAACC,KAAK,EAAE;QACjD,IAAIE,GAAG,GAAGnB,WAAW,CAACoB,GAAG,CAACD,GAAG;QAC7Bb,GAAG,GAAGA,GAAG,CAACe,KAAK,CAAC;UACdC,OAAO,EAAEhB,GAAG,CAACgB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,SAAS,CAAC;UACpDM,eAAe,EAAE;SAClB,CAAC;;;IAGNX,OAAO,CAACC,GAAG,CAACR,GAAG,CAAC;IAChB,OAAOC,IAAI,CAACkB,MAAM,CAACnB,GAAG,CAAC;EACzB;;AApBWL,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAyB,SAAtBzB,sBAAsB;AAAA","names":["environment","BearertokenInterceptor","constructor","location","locationStrategy","intercept","req","next","localStorage","getItem","authuser","JSON","parse","console","log","getBaseHref","auth","token","authToken","url","api","clone","headers","set","withCredentials","handle","factory"],"sourceRoot":"","sources":["D:\\MMC\\dev\\TechnicalTests\\mmc-5418-technical-test-fullstack-app\\app\\src\\app\\shared\\interceptors\\bearertoken.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Location, LocationStrategy } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class BearertokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private location: Location,\r\n    private locationStrategy: LocationStrategy\r\n  ) {}\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    if (localStorage.getItem('authuser') !== null) {\r\n      const authuser = JSON.parse(localStorage.getItem('authuser'));\r\n      console.log(this.locationStrategy.getBaseHref());\r\n      if (authuser.auth.token !== null) {\r\n        const authToken = `Bearer ${authuser.auth.token}`;\r\n        let url = environment.api.url;\r\n        req = req.clone({\r\n          headers: req.headers.set('Authorization', authToken),\r\n          withCredentials: false,\r\n        });\r\n      }\r\n    }\r\n    console.log(req);\r\n    return next.handle(req);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}