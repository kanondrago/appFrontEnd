{"ast":null,"code":"var _class;\nimport { BehaviorSubject, tap } from 'rxjs';\nimport { User } from '../models/User';\nimport { USER_LOGIN_URL } from 'src/constants/urls';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class ApiService {\n  // private toastrService: ToastrService\n  constructor(http, toastrService, router) {\n    this.http = http;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.urlApi = 'http://localhost:3000/';\n    this.userSubject = new BehaviorSubject(this.getUserLocalStorage());\n    // Obtener en información para el Header\n    this.userObservable = this.userSubject.asObservable();\n  }\n  login(userLogin) {\n    // Here pipe dont break the flow of the return and just with tap we can show \n    //  a message for the logged user\n    return this.http.post(USER_LOGIN_URL, userLogin).pipe(tap({\n      next: user => {\n        this.setUserLocalStorage(user);\n        this.userSubject.next(user);\n        this.toastrService.success(`Bienvenidos a 3DDIGITALVENUE ${user.username}`, 'Logeo exitoso');\n      },\n      error: errorResponse => {\n        this.toastrService.error(errorResponse.error, 'Logeo Fallido - vuelva a intentarlo');\n      }\n    }));\n  }\n  logout() {\n    this.userSubject.next(new User());\n    localStorage.removeItem('user');\n    this.router.navigateByUrl('/login');\n  }\n  // Seteo del LocalStorage\n  setUserLocalStorage(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  // Get del LocalStorage\n  getUserLocalStorage() {\n    const userJSON = localStorage.getItem('user');\n    if (userJSON) return JSON.parse(userJSON);\n    return new User();\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAIA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AAGvD,SAASC,IAAI,QAAQ,gBAAgB;AAErC,SAASC,cAAc,QAAQ,oBAAoB;;;;;AAMnD,OAAM,MAAOC,UAAU;EAOrB;EACAC,YACUC,IAAgB,EAChBC,aAA4B,EAC5BC,MAAc;IAFd,SAAI,GAAJF,IAAI;IACJ,kBAAa,GAAbC,aAAa;IACb,WAAM,GAANC,MAAM;IATR,WAAM,GAAG,wBAAwB;IAEjC,gBAAW,GAAG,IAAIR,eAAe,CAAO,IAAI,CAACS,mBAAmB,EAAE,CAAC;IASzE;IACA,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACvD;EAEOC,KAAK,CAACC,SAAoB;IAC/B;IACA;IACA,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAOZ,cAAc,EAAEW,SAAS,CAAC,CAACE,IAAI,CACzDf,GAAG,CAAC;MACFgB,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACC,mBAAmB,CAACD,IAAI,CAAC;QAC9B,IAAI,CAACP,WAAW,CAACM,IAAI,CAACC,IAAI,CAAC;QAC3B,IAAI,CAACX,aAAa,CAACa,OAAO,CACxB,gCAAgCF,IAAI,CAACG,QAAQ,EAAE,EAC/C,eAAe,CAChB;MACH,CAAC;MACDC,KAAK,EAAGC,aAAa,IAAI;QACvB,IAAI,CAAChB,aAAa,CAACe,KAAK,CAACC,aAAa,CAACD,KAAK,EAAE,qCAAqC,CAAC;MACtF;KACD,CAAC,CACH;EACH;EAEOE,MAAM;IACX,IAAI,CAACb,WAAW,CAACM,IAAI,CAAC,IAAIf,IAAI,EAAE,CAAC;IACjCuB,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAClB,MAAM,CAACmB,aAAa,CAAC,QAAQ,CAAC;EACrC;EAEA;EACQR,mBAAmB,CAACD,IAAU;IACpCO,YAAY,CAACG,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;EACpD;EAEA;EACQT,mBAAmB;IACzB,MAAMsB,QAAQ,GAAGN,YAAY,CAACO,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAGD,QAAQ,EAAE,OAAOF,IAAI,CAACI,KAAK,CAACF,QAAQ,CAAS;IAChD,OAAO,IAAI7B,IAAI,EAAE;EACnB;;SArDWE,UAAU;;mBAAVA,MAAU;AAAA;;SAAVA,MAAU;EAAA8B,SAAV9B,MAAU;EAAA+B,YAFT;AAAM","names":["BehaviorSubject","tap","User","USER_LOGIN_URL","ApiService","constructor","http","toastrService","router","getUserLocalStorage","userObservable","userSubject","asObservable","login","userLogin","post","pipe","next","user","setUserLocalStorage","success","username","error","errorResponse","logout","localStorage","removeItem","navigateByUrl","setItem","JSON","stringify","userJSON","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["/Users/ronaldchavez/R/exalona/Projects/prueba/mmc-5418-technical-test-frontend/app/src/app/services/api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { User } from '../models/User';\nimport { UserLogin } from '../interfaces/UserLogin';\nimport { USER_LOGIN_URL } from 'src/constants/urls';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private urlApi = 'http://localhost:3000/';\n\n  private userSubject = new BehaviorSubject<User>(this.getUserLocalStorage());\n  public userObservable:Observable<User>;\n\n  // private toastrService: ToastrService\n  constructor(\n    private http: HttpClient,\n    private toastrService: ToastrService,\n    private router: Router) \n  { \n    // Obtener en información para el Header\n    this.userObservable = this.userSubject.asObservable();\n  }\n\n  public login(userLogin: UserLogin): Observable<User> {\n    // Here pipe dont break the flow of the return and just with tap we can show \n    //  a message for the logged user\n    return this.http.post<User>(USER_LOGIN_URL, userLogin).pipe(\n      tap({\n        next: (user) => {\n          this.setUserLocalStorage(user);\n          this.userSubject.next(user);\n          this.toastrService.success(\n            `Bienvenidos a 3DDIGITALVENUE ${user.username}`,\n            'Logeo exitoso'\n          )\n        },\n        error: (errorResponse) => {\n          this.toastrService.error(errorResponse.error, 'Logeo Fallido - vuelva a intentarlo');\n        }\n      })\n    ) \n  } \n\n  public logout() {\n    this.userSubject.next(new User());\n    localStorage.removeItem('user');\n    this.router.navigateByUrl('/login');\n  }\n\n  // Seteo del LocalStorage\n  private setUserLocalStorage(user: User) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  // Get del LocalStorage\n  private getUserLocalStorage() {\n    const userJSON = localStorage.getItem('user');\n    if(userJSON) return JSON.parse(userJSON) as User;\n    return new User();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}