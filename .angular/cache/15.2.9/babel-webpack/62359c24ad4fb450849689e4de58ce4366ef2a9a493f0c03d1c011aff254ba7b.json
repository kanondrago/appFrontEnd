{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.apiRoot = '/login';\n    this.user = null;\n    this.userLogged$ = new BehaviorSubject(undefined);\n  }\n  login(user) {\n    /* this.user = this.setUserLogged(user);\r\n        this.userLogged$.next(this.user); */\n    const body = {\n      username: user.username,\n      password: user.password\n    };\n    return this.http.post(environment.api.url + this.apiRoot, body).pipe(tap(result => {\n      const res = {\n        auth: result?.auth,\n        user: result?.user\n      };\n      this.user = this.setUserLogged(res);\n      this.userLogged$.next(this.user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('authuser');\n  }\n  setUserLogged(authuser) {\n    if (authuser.auth.token) {\n      /* const expiresIn = Math.round(Date.now() + user.expires_at * 1000); */\n      localStorage.setItem('authuser', JSON.stringify({\n        user: authuser.user,\n        auth: authuser.auth\n      }));\n    }\n    return authuser;\n  }\n  getUserLogged() {\n    this.checkCurrentuser();\n    return this.userLogged$.asObservable();\n  }\n  getCurrentUser() {\n    return this.user.user;\n  }\n  checkCurrentuser() {\n    console.log('check');\n    const item = localStorage.getItem('authuser');\n    this.user = item ? JSON.parse(item) : undefined;\n    if (this.user !== undefined) {\n      const check = this.checkTokenExpiration();\n      this.user = check == false ? JSON.parse(item) : undefined;\n    }\n    this.userLogged$.next(this.user);\n  }\n  checkTokenExpiration() {\n    if (localStorage.getItem('authuser') === null) {\n      return true;\n    } else {\n      const date = new Date();\n      const item = localStorage.getItem('authuser');\n      const authuser = JSON.parse(item);\n      if (!authuser || date > new Date(authuser.auth.expiry)) {\n        localStorage.removeItem('authuser');\n        return true;\n      }\n      return false;\n    }\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","tap","environment","LoginService","constructor","http","userLogged$","undefined","login","user","body","username","password","post","api","url","apiRoot","pipe","result","res","auth","setUserLogged","next","logout","localStorage","removeItem","authuser","token","setItem","JSON","stringify","getUserLogged","checkCurrentuser","asObservable","getCurrentUser","console","log","item","getItem","parse","check","checkTokenExpiration","date","Date","expiry","factory"],"sourceRoot":"","sources":["D:\\MMC\\dev\\TechnicalTests\\mmc-5418-technical-test-fullstack-app\\app\\src\\app\\login\\services\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthUserModel, LoginModel } from '../models/login.model';\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n  apiRoot = '/login';\r\n  private user: AuthUserModel | null = null;\r\n  private userLogged$: BehaviorSubject<AuthUserModel>;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.userLogged$ = new BehaviorSubject<AuthUserModel>(undefined);\r\n  }\r\n  public login(user: LoginModel) {\r\n    /* this.user = this.setUserLogged(user);\r\n        this.userLogged$.next(this.user); */\r\n    const body = {\r\n      username: user.username,\r\n      password: user.password,\r\n    };\r\n\r\n    return this.http.post(environment.api.url + this.apiRoot, body).pipe(\r\n      tap((result) => {\r\n        const res: AuthUserModel = {\r\n          auth: result?.auth,\r\n          user: result?.user,\r\n        };\r\n        this.user = this.setUserLogged(res);\r\n        this.userLogged$.next(this.user);\r\n      })\r\n    ) as Observable<any>;\r\n  }\r\n\r\n  public logout() {\r\n    localStorage.removeItem('authuser');\r\n  }\r\n\r\n  private setUserLogged(authuser: AuthUserModel) {\r\n    if (authuser.auth.token) {\r\n      /* const expiresIn = Math.round(Date.now() + user.expires_at * 1000); */\r\n      localStorage.setItem(\r\n        'authuser',\r\n        JSON.stringify({\r\n          user: authuser.user,\r\n          auth: authuser.auth,\r\n        })\r\n      );\r\n    }\r\n    return authuser;\r\n  }\r\n\r\n  public getUserLogged(): Observable<any> {\r\n    this.checkCurrentuser();\r\n    return this.userLogged$.asObservable();\r\n  }\r\n\r\n  public getCurrentUser() {\r\n    return this.user.user;\r\n  }\r\n\r\n  public checkCurrentuser() {\r\n    console.log('check');\r\n    const item = localStorage.getItem('authuser');\r\n    this.user = item ? JSON.parse(item) : undefined;\r\n    if (this.user !== undefined) {\r\n      const check = this.checkTokenExpiration();\r\n      this.user = check == false ? JSON.parse(item) : undefined;\r\n    }\r\n    this.userLogged$.next(this.user);\r\n  }\r\n\r\n  private checkTokenExpiration() {\r\n    if (localStorage.getItem('authuser') === null) {\r\n      return true;\r\n    } else {\r\n      const date = new Date();\r\n      const item = localStorage.getItem('authuser');\r\n      const authuser: AuthUserModel = JSON.parse(item);\r\n      if (!authuser || date > new Date(authuser.auth.expiry)) {\r\n        localStorage.removeItem('authuser');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}