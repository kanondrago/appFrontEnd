{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class BearertokenInterceptor {\n  constructor() {}\n  intercept(req, next) {\n    if (localStorage.getItem('authuser') !== null) {\n      const authuser = JSON.parse(localStorage.getItem('authuser'));\n      if (authuser.auth.token !== null) {\n        const authToken = `Bearer ${authuser.auth.token}`;\n        req = req.clone({\n          headers: req.headers.set('Authorization', authToken)\n        });\n      }\n    }\n    return next.handle(req);\n  }\n}\n_class = BearertokenInterceptor;\n_class.ɵfac = function BearertokenInterceptor_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,eAAe;EACfC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;MAC7C,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;MAC7D,IAAIC,QAAQ,CAACG,IAAI,CAACC,KAAK,KAAK,IAAI,EAAE;QAChC,MAAMC,SAAS,GAAG,UAAUL,QAAQ,CAACG,IAAI,CAACC,KAAK,EAAE;QACjDR,GAAG,GAAGA,GAAG,CAACU,KAAK,CAAC;UACdC,OAAO,EAAEX,GAAG,CAACW,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,SAAS;SACpD,CAAC;;;IAGN,OAAOR,IAAI,CAACY,MAAM,CAACb,GAAG,CAAC;EACzB;;SAbWH,sBAAsB;;mBAAtBA,MAAsB;AAAA;;SAAtBA,MAAsB;EAAAiB,SAAtBjB,MAAsB;AAAA","names":["BearertokenInterceptor","constructor","intercept","req","next","localStorage","getItem","authuser","JSON","parse","auth","token","authToken","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["D:\\MMC\\dev\\TechnicalTests\\mmc-5418-technical-test-frontend\\app\\src\\app\\shared\\interceptors\\bearertoken.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class BearertokenInterceptor implements HttpInterceptor {\r\n  constructor() {}\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    if (localStorage.getItem('authuser') !== null) {\r\n      const authuser = JSON.parse(localStorage.getItem('authuser'));\r\n      if (authuser.auth.token !== null) {\r\n        const authToken = `Bearer ${authuser.auth.token}`;\r\n        req = req.clone({\r\n          headers: req.headers.set('Authorization', authToken),\r\n        });\r\n      }\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}