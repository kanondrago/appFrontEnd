{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ResolveStart } from '@angular/router';\nlet LoginResolver = class LoginResolver extends ResolveStart {\n  constructor(route, myService, dialog) {}\n  resolve() {\n    const dialogRef = this.dialog.open(ProgressComponent);\n    return this.myService.getMyImportantData().pipe(tap(data => this.myService.storeData(data)), tap(() => dialogRef.close()), map(() => true), catchError(err => of(false)));\n  }\n};\nLoginResolver = __decorate([Injectable({\n  providedIn: 'root'\n})], LoginResolver);\nexport { LoginResolver };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAG1C,SAAkBC,YAAY,QAAQ,iBAAiB;AAGhD,IAAMC,aAAa,GAAnB,MAAMA,aAAc,SAAQD,YAAY;EAC7CE,YACEC,KAA6B,EAC7BC,SAAoB,EACpBC,MAAiB,GAChB;EAEHC,OAAO;IACL,MAAMC,SAAS,GAAG,IAAI,CAACF,MAAM,CAACG,IAAI,CAACC,iBAAiB,CAAC;IACrD,OAAO,IAAI,CAACL,SAAS,CAACM,kBAAkB,EAAE,CAACC,IAAI,CAC7CC,GAAG,CAAEC,IAAI,IAAK,IAAI,CAACT,SAAS,CAACU,SAAS,CAACD,IAAI,CAAC,CAAC,EAC7CD,GAAG,CAAC,MAAML,SAAS,CAACQ,KAAK,EAAE,CAAC,EAC5BC,GAAG,CAAC,MAAM,IAAI,CAAC,EACfC,UAAU,CAAEC,GAAG,IAAKC,EAAE,CAAC,KAAK,CAAC,CAAC,CAC/B;EACH;CACD;AAhBYlB,aAAa,eADzBF,UAAU,CAAC;EAAEqB,UAAU,EAAE;AAAM,CAAE,CAAC,GACtBnB,aAAa,CAgBzB;SAhBYA,aAAa","names":["Injectable","ResolveStart","LoginResolver","constructor","route","myService","dialog","resolve","dialogRef","open","ProgressComponent","getMyImportantData","pipe","tap","data","storeData","close","map","catchError","err","of","providedIn"],"sourceRoot":"","sources":["D:\\MMC\\dev\\TechnicalTests\\mmc-5418-technical-test-fullstack-app\\app\\src\\app\\login\\resolvers\\login.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from '../services/login.service';\r\nimport { Resolve, ResolveStart } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoginResolver extends ResolveStart {\r\n  constructor(\r\n    route: ActivatedRouteSnapshot,\r\n    myService: MyService,\r\n    dialog: MatDialog\r\n  ) {}\r\n\r\n  resolve() {\r\n    const dialogRef = this.dialog.open(ProgressComponent);\r\n    return this.myService.getMyImportantData().pipe(\r\n      tap((data) => this.myService.storeData(data)),\r\n      tap(() => dialogRef.close()),\r\n      map(() => true),\r\n      catchError((err) => of(false))\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}